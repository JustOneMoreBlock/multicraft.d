## Settings for Docker support (EXPERIMENTAL)
[docker]
## Enable Docker support
## default: false
enabled = false

## The name of the user that the container process should belong to. It's
## recommended to create a new user that is used just for this, for example:
## # adduser --disabled-login --no-create-home --ingroup users docker
## default: docker
#user = docker

## The name of the "docker" group. This group needs to have access to the
## docker daemon.
## default: docker
#group = docker

## The full path to the "docker" executable
## default: /usr/bin/docker
#docker = /usr/bin/docker

## The name of the Docker image to use
## default: java:jre
#image = java:jre

## Memory in MB to add to server memory value for Docker containers
## default: 128
#memoryAdd = 128

## CPU factor for each Docker container. Multiplies default CPU shares by this
## value.
## default: 1.0
#cpuFactor = 1.0

## If this is enabled the daemon will try to always show the external IP in the
## server console instead of the IP used in the container.
## default: true
#maskIp = true

## Format for volume definitions (see mounts below)
## default: --volume=%s:%s:%s
#volumeFormat = --volume=%s:%s:%s

## Format for environment variable definitions
## default: --env=%s=%s
#envFormat = --env=%s=%s

## Directories to mount inside the container. Uses the "volumeFormat" setting
## to mount the directories. Format:
## HOST_DIR[:[CONTAINER_DIR]:[MODE]]
## If CONTAINER_DIR is omitted it is set to the same value as HOST_DIR.
## MODE can be "rw" for writable or "ro" for read-only, defaults to "ro".
#mounts = "{TEMPLATES_DIR}" "{MULTICRAFT_DIR}/scripts" "{DAEMON_JAR_DIR}" "{SERVER_DIR}::rw" "/usr/lib/locale"

## Additional arguments to pass to Docker
## default: empty
#arguments =

## The command to start the Docker container.  See the [start] section of the
## default "craftbukkit.jar.conf" for a list of available variables.
## Additional variables:
## - {DOCKER_ARGS} The additional arguments from the "arguments" setting
## - {DOCKER_VOLUMES} The volume arguments generated from the "volumeFormat"
##   and "mounts" settings
## - {DOCKER_ENVS} The env arguments generated using the "envFormat" setting
## - {DOCKER_IMAGE} The docker image to use
## - {DOCKER_MEMORY} The memory limit in MB to use for this container. This is
##   calculated as the server memory limit plus the "memoryAdd" setting
## - {DOCKER_CPUSHARES} The CPU shares this container can use. This is
##   calculated using the "cpuFactor" setting (1024 * cpuFactor)
## - {DOCKER_IP} The actual IP setting of the server. When running in a Docker
##   container the {IP} variable is always 0.0.0.0
#command = run --rm -i -a stdin -a stdout -a stderr --read-only --tmpfs /tmp:exec --security-opt=no-new-privileges --cap-drop=ALL {DOCKER_ARGS} -p {DOCKER_IP}:{PORT}:{PORT} -w {WORKING_DIR} -u {UID}:{GID} -m {DOCKER_MEMORY}M --cpu-shares={DOCKER_CPUSHARES} --name=mc{SERVER_ID} {DOCKER_VOLUMES} {DOCKER_ENVS} {DOCKER_IMAGE}

## The command to stop a container when a server did not shut down on its own
## after a certain period of time
#stopCommand = stop mc{SERVER_ID}

## The command to kill a container when it does not close after sending the
## stop command
#killCommand = kill mc{SERVER_ID}

## The command to determine the PID of the root process of a container
#pidCommand = inspect -f "{{ .State.Pid }}" mc{SERVER_ID}

## Docker settings can be overridden by conf files of server executables in the
## [docker] section. This setting is a comma sepparated list of setting types
## that can be overridden. Valid values:
## - disable: Allows conf files to run without Docker ("enabled" setting)
## - image: Allows conf files to change the image name ("image" setting)
## - settings: Allows conf files to change general settings ("memoryAdd",
##   "cpuFactor", "maskIp" settings)
## - command: Allows conf files to affect the final docker run command
##   ("mounts", "arguments", "command", "stopCommand", "killCommand")
## default: image, settings
#override = image, settings

## Cleanup existing docker containers using the configured cleanup command
## before trying to run a server.
## default: false
#cleanup = false

## The command to cleanup an existing container before starting a server
#cleanupCommand = rm -f mc{SERVER_ID}